package gen

import (
	"os"
	"testing"
	"time"

	"github.com/kataras/pg"
)

// BaseEntity is a struct that defines common fields for all entities in the database.
// It has an ID field of type uuid that is the primary key, and two timestamp fields
// for tracking the creation and update times of each row.
type BaseEntity struct {
	ID        string    `pg:"type=uuid,primary"`
	CreatedAt time.Time `pg:"type=timestamp,default=clock_timestamp()"`
	UpdatedAt time.Time `pg:"type=timestamp,default=clock_timestamp()"`
}

// Company is a struct that represents a company entity in the database.
type Company struct {
	BaseEntity

	Name string `pg:"type=varchar(255)"`
}

// Customer is a struct that represents a customer entity in the database.
// It embeds the BaseEntity struct and adds a CognitoUserID field of type uuid
// that is required and unique. It also specifies a conflict resolution strategy
// for the CognitoUserID field in case of duplicate values.
type Customer struct {
	BaseEntity
	// CognitoUserID string `pg:"type=uuid,conflict=DO UPDATE SET cognito_user_id=EXCLUDED.cognito_user_id"`

	CognitoUserID string `pg:"type=uuid,unique_index=customer_unique_idx"`
	Email         string `pg:"type=varchar(255),unique_index=customer_unique_idx"` // optional: unique to allow upsert by "email"-only column confliction instead of the unique_index.
	Name          string `pg:"type=varchar(255)"`
	CompanyID     string `pg:"type=uuid,ref=companies(id)"`
}

func TestGenerateColumnsFromSchema(t *testing.T) {
	const (
		rootDir = "./_testdata"
	)
	defer func() {
		os.RemoveAll(rootDir)
		time.Sleep(1 * time.Second)
	}()

	schema := pg.NewSchema()
	schema.MustRegister("companies", Company{})
	schema.MustRegister("customers", Customer{})

	opts := ExportOptions{
		RootDir: rootDir,
	}
	if err := GenerateColumnsFromSchema(schema, opts); err != nil {
		t.Fatal(err)
	}

	companyContents, err := os.ReadFile(rootDir + "/company.go")
	if err != nil {
		t.Fatal(err)
	}

	rootContents, err := os.ReadFile(rootDir + "/testdata.go")
	if err != nil {
		t.Fatal(err)
	}
	customerContents, err := os.ReadFile(rootDir + "/customer.go")
	if err != nil {
		t.Fatal(err)
	}

	const (
		expectedRootContents = `// Code generated by pg. DO NOT EDIT.
package testdata

// Column is a struct that represents a column in a table.
type Column struct {
	Name string
}

// String returns the name of the column.
func (c Column) String() string {
	return c.Name
}
`

		expectedCompanyContents = `// Code generated by pg. DO NOT EDIT.
package testdata

// Company is a struct value that represents a record in the companies table.
var Company = struct {
	PG_TableName string
	ID           Column
	CreatedAt    Column
	UpdatedAt    Column
	Name         Column
}{
	PG_TableName: "companies",
	ID: Column{
		Name: "id",
	},
	CreatedAt: Column{
		Name: "created_at",
	},
	UpdatedAt: Column{
		Name: "updated_at",
	},
	Name: Column{
		Name: "name",
	},
}
`
		expectedCustomerContents = `// Code generated by pg. DO NOT EDIT.
package testdata

// Customer is a struct value that represents a record in the customers table.
var Customer = struct {
	PG_TableName  string
	ID            Column
	CreatedAt     Column
	UpdatedAt     Column
	CognitoUserID Column
	Email         Column
	Name          Column
	CompanyID     Column
}{
	PG_TableName: "customers",
	ID: Column{
		Name: "id",
	},
	CreatedAt: Column{
		Name: "created_at",
	},
	UpdatedAt: Column{
		Name: "updated_at",
	},
	CognitoUserID: Column{
		Name: "cognito_user_id",
	},
	Email: Column{
		Name: "email",
	},
	Name: Column{
		Name: "name",
	},
	CompanyID: Column{
		Name: "company_id",
	},
}
`
	)

	if string(companyContents) != expectedCompanyContents {
		t.Fatalf("expected company contents to be %q but got %q", expectedCompanyContents, companyContents)
	}

	if string(rootContents) != expectedRootContents {
		t.Fatalf("expected root contents to be %q but got %q", expectedRootContents, rootContents)
	}

	if string(customerContents) != expectedCustomerContents {
		t.Fatalf("expected customer contents to be %q but got %q", expectedCustomerContents, customerContents)
	}
}
